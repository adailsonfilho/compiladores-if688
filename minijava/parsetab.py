
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '0EA87934D7783461CE6AD550D18046DD'
    
_lr_action_items = {'RBRACKET':([4,35,37,69,70,71,72,74,78,97,107,108,110,111,112,114,115,116,122,123,126,129,139,],[-48,39,41,-39,-42,-43,-40,-41,99,-46,-47,-29,-32,-30,-31,-35,-33,126,129,-45,-34,-44,-36,]),'AND':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,89,89,89,89,89,89,89,-47,89,-32,89,-31,-35,-33,89,89,-45,-34,89,89,-44,89,89,-36,]),'CLASS':([0,2,6,7,9,34,79,],[1,-49,10,-4,-3,-5,-2,]),'NOT':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'EXTENDS':([4,12,],[-48,14,]),'BOOLEAN':([19,21,22,26,33,40,44,55,85,104,],[-49,24,-16,-17,24,-18,24,24,-49,24,]),'$end':([2,3,6,7,9,34,79,],[-49,0,-1,-4,-3,-5,-2,]),'STRING':([23,],[31,]),'STATIC':([11,],[13,]),'ELSE':([81,98,109,118,119,130,132,],[-10,-14,124,-13,-12,-11,-15,]),'NEW':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'PLUS':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,93,93,93,93,93,93,93,-47,93,-32,93,-31,-35,-33,93,93,-45,-34,93,93,-44,93,93,-36,]),'INT':([19,21,22,26,33,40,44,55,68,85,104,],[-49,27,-16,-17,27,-18,27,27,86,-49,27,]),'LET':([4,50,99,],[-48,59,117,]),'WHILE':([22,26,40,47,53,63,64,81,82,85,90,98,101,104,118,119,121,124,130,132,],[-16,-17,-18,54,-49,-9,54,-10,-8,-49,54,-14,54,-49,-13,-12,54,54,-11,-15,]),'LENGTH':([94,],[114,]),'TIMES':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,95,95,95,95,95,95,95,-47,95,95,95,95,-35,-33,95,95,-45,-34,95,95,-44,95,95,-36,]),'FALSE':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'LBRACKET':([4,27,31,50,69,70,71,72,74,75,77,78,80,83,86,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,35,37,60,-39,-42,-43,-40,-41,96,96,96,96,96,105,96,96,-47,96,-32,96,-31,-35,-33,96,96,-45,-34,96,96,-44,96,96,-36,]),'MINUS':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,91,91,91,91,91,91,91,-47,91,-32,91,-31,-35,-33,91,91,-45,-34,91,91,-44,91,91,-36,]),'TRUE':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'RETURN':([22,26,40,63,81,82,85,98,103,104,118,119,121,130,132,],[-16,-17,-18,-9,-10,-8,-49,-14,120,-49,-13,-12,-26,-11,-15,]),'MAIN':([17,],[20,]),'RPAREN':([4,43,48,56,57,69,70,71,72,74,75,80,83,84,88,97,102,106,107,108,110,111,112,114,115,123,126,129,131,134,136,138,139,140,],[-48,45,-49,67,-28,-39,-42,-43,-40,-41,90,100,101,-49,107,-46,-27,123,-47,-29,-32,-30,-31,-35,-33,-45,-34,-44,-49,-38,139,-49,-36,-37,]),'LBRACE':([4,5,12,15,16,18,22,26,40,45,47,53,63,64,67,81,82,85,90,98,101,104,118,119,121,124,130,132,],[-48,8,-49,19,-7,-6,-16,-17,-18,47,53,-49,-9,53,85,-10,-8,-49,53,-14,53,-49,-13,-12,53,53,-11,-15,]),'PUBLIC':([8,19,21,22,25,26,30,32,40,137,],[11,-49,-49,-16,33,-17,-24,-23,-18,-25,]),'RBRACE':([19,21,22,25,26,30,32,40,51,53,61,63,64,81,82,98,118,119,130,132,133,137,],[-49,-49,-16,34,-17,-24,-23,-18,61,-49,79,-9,81,-10,-8,-14,-13,-12,-11,-15,137,-25,]),'SYSTEM_PRINTLN':([22,26,40,47,53,63,64,81,82,85,90,98,101,104,118,119,121,124,130,132,],[-16,-17,-18,52,-49,-9,52,-10,-8,-49,52,-14,52,-49,-13,-12,52,52,-11,-15,]),'COMMA':([4,48,69,70,71,72,74,84,97,107,108,110,111,112,114,115,123,126,129,131,138,139,],[-48,55,-39,-42,-43,-40,-41,55,-46,-47,-29,-32,-30,-31,-35,-33,-45,-34,-44,135,135,-36,]),'LIT_INT':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'LESS_THAN':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,92,92,92,92,92,92,92,-47,92,-32,92,-31,-35,-33,92,92,-45,-34,92,92,-44,92,92,-36,]),'ID':([1,4,10,14,19,21,22,24,26,27,28,29,33,38,39,40,41,44,46,47,53,55,58,59,60,62,63,64,65,66,68,73,76,81,82,85,89,90,91,92,93,94,95,96,98,101,104,105,117,118,119,120,121,124,125,130,132,135,],[4,-48,4,4,-49,4,-16,-20,-17,-21,-22,4,4,4,-19,-18,4,4,4,4,-49,4,4,4,4,4,-9,4,4,4,4,4,4,-10,-8,-49,4,4,4,4,4,4,4,4,-14,4,4,4,4,-13,-12,4,4,4,4,-11,-15,4,]),'SEMICOLON':([4,36,69,70,71,72,74,77,97,100,107,108,110,111,112,114,115,123,126,127,128,129,139,],[-48,40,-39,-42,-43,-40,-41,98,-46,118,-47,-29,-32,-30,-31,-35,-33,-45,-34,132,133,-44,-36,]),'DOT':([4,69,70,71,72,74,75,77,78,80,83,88,97,107,108,110,111,112,114,115,116,122,123,126,127,128,129,131,138,139,],[-48,-39,-42,-43,-40,-41,94,94,94,94,94,94,94,-47,94,-32,94,-31,-35,-33,94,94,-45,-34,94,94,-44,94,94,-36,]),'LPAREN':([4,20,42,49,52,54,58,59,60,62,65,73,76,87,89,91,92,93,95,96,105,113,117,120,125,135,],[-48,23,44,58,62,65,73,73,73,73,73,73,73,106,73,73,73,73,73,73,73,125,73,73,73,73,]),'IF':([22,26,40,47,53,63,64,81,82,85,90,98,101,104,118,119,121,124,130,132,],[-16,-17,-18,49,-49,-9,49,-10,-8,-49,49,-14,49,-49,-13,-12,49,49,-11,-15,]),'VOID':([13,],[17,]),'THIS':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'classdeclaration':([6,],[9,]),'statement':([47,64,90,101,121,124,],[51,82,109,119,82,130,]),'vardeclaration_star':([19,85,],[21,104,]),'type':([21,33,44,55,104,],[29,38,46,66,29,]),'statement_star':([53,104,],[64,121,]),'extends_opt':([12,],[15,]),'expression':([58,59,60,62,65,73,76,89,91,92,93,95,96,105,117,120,125,135,],[75,77,78,80,83,88,97,108,110,111,112,115,116,122,127,128,131,138,]),'methodbody':([85,],[103,]),'methoddeclaration_star':([21,],[25,]),'vardeclaration':([21,104,],[26,26,]),'params_opt':([48,84,],[56,102,]),'expression_opt':([131,138,],[136,140,]),'id':([1,10,14,21,29,33,38,41,44,46,47,55,58,59,60,62,64,65,66,68,73,76,89,90,91,92,93,94,95,96,101,104,105,117,120,121,124,125,135,],[5,12,18,28,36,28,42,43,28,48,50,28,70,70,70,70,50,70,84,87,70,70,70,50,70,70,70,113,70,70,50,28,70,70,70,50,50,70,70,]),'mainclass':([0,],[2,]),'methoddeclaration':([25,],[32,]),'goal':([0,],[3,]),'classdeclaration_star':([2,],[6,]),'empty':([2,12,19,21,48,53,84,85,104,131,138,],[7,16,22,30,57,63,57,22,63,134,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal","S'",1,None,None,None),
  ('goal -> mainclass classdeclaration_star','goal',2,'p_goal','minijava_parser.py',140),
  ('mainclass -> CLASS id LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET id RPAREN LBRACE statement RBRACE RBRACE','mainclass',17,'p_mainclass','minijava_parser.py',145),
  ('classdeclaration_star -> classdeclaration_star classdeclaration','classdeclaration_star',2,'p_classdeclaration_star','minijava_parser.py',150),
  ('classdeclaration_star -> empty','classdeclaration_star',1,'p_classdeclaration_star','minijava_parser.py',151),
  ('classdeclaration -> CLASS id extends_opt LBRACE vardeclaration_star methoddeclaration_star RBRACE','classdeclaration',7,'p_classdeclaration','minijava_parser.py',157),
  ('extends_opt -> EXTENDS id','extends_opt',2,'p_extends_opt','minijava_parser.py',162),
  ('extends_opt -> empty','extends_opt',1,'p_extends_opt','minijava_parser.py',163),
  ('statement_star -> statement_star statement','statement_star',2,'p_statement_star','minijava_parser.py',169),
  ('statement_star -> empty','statement_star',1,'p_statement_star','minijava_parser.py',170),
  ('statement -> LBRACE statement_star RBRACE','statement',3,'p_statement_block','minijava_parser.py',176),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','minijava_parser.py',182),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','minijava_parser.py',188),
  ('statement -> SYSTEM_PRINTLN LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_syso','minijava_parser.py',194),
  ('statement -> id LET expression SEMICOLON','statement',4,'p_statement_id_exp','minijava_parser.py',200),
  ('statement -> id LBRACKET expression RBRACKET LET expression SEMICOLON','statement',7,'p_statement_id_array_exp','minijava_parser.py',206),
  ('vardeclaration_star -> empty','vardeclaration_star',1,'p_vardeclaration_star','minijava_parser.py',211),
  ('vardeclaration_star -> vardeclaration_star vardeclaration','vardeclaration_star',2,'p_vardeclaration_star','minijava_parser.py',212),
  ('vardeclaration -> type id SEMICOLON','vardeclaration',3,'p_vardeclaration','minijava_parser.py',218),
  ('type -> INT LBRACKET RBRACKET','type',3,'p_type_int_array','minijava_parser.py',224),
  ('type -> BOOLEAN','type',1,'p_type_boolean','minijava_parser.py',230),
  ('type -> INT','type',1,'p_type_int','minijava_parser.py',236),
  ('type -> id','type',1,'p_type_id','minijava_parser.py',242),
  ('methoddeclaration_star -> methoddeclaration_star methoddeclaration','methoddeclaration_star',2,'p_methoddeclaration_star','minijava_parser.py',247),
  ('methoddeclaration_star -> empty','methoddeclaration_star',1,'p_methoddeclaration_star','minijava_parser.py',248),
  ('methoddeclaration -> PUBLIC type id LPAREN type id params_opt RPAREN LBRACE methodbody RETURN expression SEMICOLON RBRACE','methoddeclaration',14,'p_methoddeclaration','minijava_parser.py',254),
  ('methodbody -> vardeclaration_star statement_star','methodbody',2,'p_method_body','minijava_parser.py',259),
  ('params_opt -> COMMA type id params_opt','params_opt',4,'p_params_opt','minijava_parser.py',263),
  ('params_opt -> empty','params_opt',1,'p_params_opt','minijava_parser.py',264),
  ('expression -> expression AND expression','expression',3,'p_expression_bin','minijava_parser.py',270),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_bin','minijava_parser.py',271),
  ('expression -> expression PLUS expression','expression',3,'p_expression_bin','minijava_parser.py',272),
  ('expression -> expression MINUS expression','expression',3,'p_expression_bin','minijava_parser.py',273),
  ('expression -> expression TIMES expression','expression',3,'p_expression_bin','minijava_parser.py',274),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression_array','minijava_parser.py',280),
  ('expression -> expression DOT LENGTH','expression',3,'p_expression_length','minijava_parser.py',286),
  ('expression -> expression DOT id LPAREN expression expression_opt RPAREN','expression',7,'p_expression_params','minijava_parser.py',292),
  ('expression_opt -> COMMA expression expression_opt','expression_opt',3,'p_expression_opt','minijava_parser.py',297),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','minijava_parser.py',298),
  ('expression -> LIT_INT','expression',1,'p_expression_litint','minijava_parser.py',304),
  ('expression -> TRUE','expression',1,'p_expression_true','minijava_parser.py',310),
  ('expression -> FALSE','expression',1,'p_expression_false','minijava_parser.py',316),
  ('expression -> id','expression',1,'p_expression_id','minijava_parser.py',322),
  ('expression -> THIS','expression',1,'p_expression_this','minijava_parser.py',328),
  ('expression -> NEW INT LBRACKET expression RBRACKET','expression',5,'p_expression_new_array','minijava_parser.py',334),
  ('expression -> NEW id LPAREN RPAREN','expression',4,'p_expression_new_instance','minijava_parser.py',340),
  ('expression -> NOT expression','expression',2,'p_expression_not','minijava_parser.py',346),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','minijava_parser.py',352),
  ('id -> ID','id',1,'p_id','minijava_parser.py',357),
  ('empty -> <empty>','empty',0,'p_empty','minijava_parser.py',366),
]
