
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '954EE22A79DC429CE06F75ED53192C33'
    
_lr_action_items = {'EQUALS':([4,],[14,]),'DIVIDE':([3,4,5,7,8,9,15,16,17,18,19,20,],[12,-10,-9,12,-10,-7,-8,12,12,-6,-5,12,]),'TIMES':([3,4,5,7,8,9,15,16,17,18,19,20,],[13,-10,-9,13,-10,-7,-8,13,13,-6,-5,13,]),'PLUS':([3,4,5,7,8,9,15,16,17,18,19,20,],[11,-10,-9,11,-10,-7,-8,-4,-3,-6,-5,11,]),'NUMBER':([0,1,2,10,11,12,13,14,],[5,5,5,5,5,5,5,5,]),'MINUS':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[2,2,2,10,-10,-9,10,-10,-7,2,2,2,2,2,-8,-4,-3,-6,-5,10,]),'RPAREN':([5,7,8,9,15,16,17,18,19,],[-9,15,-10,-7,-8,-4,-3,-6,-5,]),'NAME':([0,1,2,10,11,12,13,14,],[4,8,8,8,8,8,8,8,]),'$end':([3,4,5,6,8,9,15,16,17,18,19,20,],[-2,-10,-9,0,-10,-7,-8,-4,-3,-6,-5,-1,]),'LPAREN':([0,1,2,10,11,12,13,14,],[1,1,1,1,1,1,1,1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,2,10,11,12,13,14,],[3,7,9,16,17,18,19,20,]),'statement':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calcpy.py',61),
  ('statement -> expression','statement',1,'p_statement_expr','calcpy.py',65),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calcpy.py',69),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calcpy.py',70),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calcpy.py',71),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calcpy.py',72),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calcpy.py',79),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcpy.py',83),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcpy.py',87),
  ('expression -> NAME','expression',1,'p_expression_name','calcpy.py',91),
]
